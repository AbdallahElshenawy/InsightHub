{"ast":null,"code":"var EditBlogpostComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component, NgModule } from '@angular/core';\nlet EditBlogpostComponent = EditBlogpostComponent_1 = class EditBlogpostComponent {\n  constructor(route, blogPostService, categoryService, router, imageService) {\n    this.route = route;\n    this.blogPostService = blogPostService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.imageService = imageService;\n    this.id = null;\n    this.isImageSelectorVisible = false;\n  }\n  ngOnInit() {\n    this.categories$ = this.categoryService.getAllCategories();\n    this.routeSubscription = this.route.paramMap.subscribe({\n      next: params => {\n        this.id = params.get('id');\n        // Get BlogPost From API\n        if (this.id) {\n          this.getBlogPostSubscription = this.blogPostService.getBlogPostById(this.id).subscribe({\n            next: response => {\n              this.model = response;\n              this.selectedCategories = response.categories.map(x => x.id);\n            }\n          });\n          ;\n        }\n        this.imageSelectSubscricption = this.imageService.onSelectImage().subscribe({\n          next: response => {\n            if (this.model) {\n              this.model.featuredImageUrl = response.url;\n              this.isImageSelectorVisible = false;\n            }\n          }\n        });\n      }\n    });\n  }\n  onFormSubmit() {\n    // Convert this model to Request Object\n    if (this.model && this.id) {\n      var updateBlogPost = {\n        author: this.model.author,\n        content: this.model.content,\n        shortDescription: this.model.shortDescription,\n        featuredImageUrl: this.model.featuredImageUrl,\n        isVisible: this.model.isVisible,\n        publishedDate: this.model.publishedDate,\n        title: this.model.title,\n        urlHandle: this.model.urlHandle,\n        categories: this.selectedCategories ?? []\n      };\n      this.updateBlogPostSubscription = this.blogPostService.updateBlogPost(this.id, updateBlogPost).subscribe({\n        next: response => {\n          this.router.navigateByUrl('/admin/blogposts');\n        }\n      });\n    }\n  }\n  onDelete() {\n    if (this.id) {\n      // call service and delete blogpost\n      this.deleteBlogPostSubscription = this.blogPostService.deleteBlogPost(this.id).subscribe({\n        next: response => {\n          this.router.navigateByUrl('/admin/blogposts');\n        }\n      });\n    }\n  }\n  openImageSelector() {\n    this.isImageSelectorVisible = true;\n  }\n  closeImageSelector() {\n    this.isImageSelectorVisible = false;\n  }\n  ngOnDestroy() {\n    this.routeSubscription?.unsubscribe();\n    this.updateBlogPostSubscription?.unsubscribe();\n    this.getBlogPostSubscription?.unsubscribe();\n    this.deleteBlogPostSubscription?.unsubscribe();\n    this.imageSelectSubscricption?.unsubscribe();\n  }\n};\nEditBlogpostComponent = EditBlogpostComponent_1 = __decorate([NgModule({\n  declarations: [EditBlogpostComponent_1],\n  imports: [CommonModule, FormsModule]\n}), Component({\n  selector: 'app-edit-blogpost',\n  templateUrl: './edit-blogpost.component.html',\n  styleUrls: ['./edit-blogpost.component.css']\n})], EditBlogpostComponent);\nexport { EditBlogpostComponent };","map":{"version":3,"names":["Component","NgModule","EditBlogpostComponent","EditBlogpostComponent_1","constructor","route","blogPostService","categoryService","router","imageService","id","isImageSelectorVisible","ngOnInit","categories$","getAllCategories","routeSubscription","paramMap","subscribe","next","params","get","getBlogPostSubscription","getBlogPostById","response","model","selectedCategories","categories","map","x","imageSelectSubscricption","onSelectImage","featuredImageUrl","url","onFormSubmit","updateBlogPost","author","content","shortDescription","isVisible","publishedDate","title","urlHandle","updateBlogPostSubscription","navigateByUrl","onDelete","deleteBlogPostSubscription","deleteBlogPost","openImageSelector","closeImageSelector","ngOnDestroy","unsubscribe","__decorate","declarations","imports","CommonModule","FormsModule","selector","templateUrl","styleUrls"],"sources":["E:\\InsightHub\\InsightHub\\UI\\InsightHub\\src\\app\\features\\blog-post\\edit-blogpost\\edit-blogpost.component.ts"],"sourcesContent":["import { Component, NgModule, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { BlogPostService } from '../services/blog-post.service';\nimport { BlogPost } from '../models/blog-post.model';\nimport { CategoryService } from '../../category/services/category.service';\nimport { Category } from '../../category/models/category.model';\nimport { UpdateBlogPost } from '../models/update-blog-post.model';\nimport { ImageService } from 'src/app/shared/components/image-selector/image.service';\n@NgModule({\n  declarations: [EditBlogpostComponent],\n  imports: [\n    CommonModule,\n    FormsModule\n  ]\n})\n@Component({\n  selector: 'app-edit-blogpost',\n  templateUrl: './edit-blogpost.component.html',\n  styleUrls: ['./edit-blogpost.component.css']\n})\n\nexport class EditBlogpostComponent implements OnInit, OnDestroy {\n  id: string | null = null;\n  model?: BlogPost;\n  categories$? : Observable<Category[]>;\n  selectedCategories?: string[];\n  isImageSelectorVisible : boolean = false;\n\n\n  routeSubscription?: Subscription;\n  updateBlogPostSubscription?: Subscription;\n  getBlogPostSubscription?: Subscription;\n  deleteBlogPostSubscription?: Subscription;\n  imageSelectSubscricption?: Subscription;\n\n\n  constructor(private route: ActivatedRoute,\n    private blogPostService: BlogPostService,\n    private categoryService: CategoryService,\n    private router:Router,\n    private imageService: ImageService) {\n\n  }\n\n\n  ngOnInit(): void {\n    this.categories$ = this.categoryService.getAllCategories();\n\n\n    this.routeSubscription = this.route.paramMap.subscribe({\n      next: (params) => {\n        this.id = params.get('id');\n\n        // Get BlogPost From API\n        if (this.id) {\n          this.getBlogPostSubscription = this.blogPostService.getBlogPostById(this.id).subscribe({\n            next: (response) => {\n              this.model = response;\n              this.selectedCategories = response.categories.map(x => x.id);\n            }\n          });\n          ;\n        }\n\n        this.imageSelectSubscricption = this.imageService.onSelectImage()\n        .subscribe({\n          next: (response) => {\n            if (this.model) {\n              this.model.featuredImageUrl = response.url;\n              this.isImageSelectorVisible = false;\n            }\n          }\n        })\n      }\n    });\n  }\n\n  onFormSubmit(): void {\n    // Convert this model to Request Object\n    if (this.model && this.id) {\n      var updateBlogPost: UpdateBlogPost = {\n        author: this.model.author,\n        content: this.model.content,\n        shortDescription: this.model.shortDescription,\n        featuredImageUrl: this.model.featuredImageUrl,\n        isVisible: this.model.isVisible,\n        publishedDate: this.model.publishedDate,\n        title: this.model.title,\n        urlHandle: this.model.urlHandle,\n        categories: this.selectedCategories ?? []\n      };\n\n      this.updateBlogPostSubscription = this.blogPostService.updateBlogPost(this.id, updateBlogPost)\n      .subscribe({\n        next: (response) => {\n          this.router.navigateByUrl('/admin/blogposts');\n        }\n      });\n    }\n\n  }\n\n  onDelete(): void {\n    if (this.id) {\n      // call service and delete blogpost\n      this.deleteBlogPostSubscription = this.blogPostService.deleteBlogPost(this.id)\n      .subscribe({\n        next: (response) => {\n          this.router.navigateByUrl('/admin/blogposts');\n        }\n      });\n    }\n  }\n\n  openImageSelector(): void {\n    this.isImageSelectorVisible = true;\n  }\n\n  closeImageSelector() : void {\n    this.isImageSelectorVisible = false;\n  }\n\n  ngOnDestroy(): void {\n    this.routeSubscription?.unsubscribe();\n    this.updateBlogPostSubscription?.unsubscribe();\n    this.getBlogPostSubscription?.unsubscribe();\n    this.deleteBlogPostSubscription?.unsubscribe();\n    this.imageSelectSubscricption?.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}