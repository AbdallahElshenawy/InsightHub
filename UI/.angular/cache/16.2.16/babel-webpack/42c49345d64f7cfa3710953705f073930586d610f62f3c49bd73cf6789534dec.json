{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nlet CategoryService = class CategoryService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n  }\n  getAllCategories(query, sortBy, sortDirection, pageNumber, pageSize) {\n    let params = new HttpParams();\n    if (query) {\n      params = params.set('query', query);\n    }\n    if (sortBy) {\n      params = params.set('sortBy', sortBy);\n    }\n    if (sortDirection) {\n      params = params.set('sortDirection', sortDirection);\n    }\n    if (pageNumber) {\n      params = params.set('pageNumber', pageNumber);\n    }\n    if (pageSize) {\n      params = params.set('pageSize', pageSize);\n    }\n    return this.http.get(`${environment.apiBaseUrl}/api/categories`, {\n      params: params\n    });\n  }\n  getCategoryById(id) {\n    return this.http.get(`${environment.apiBaseUrl}/api/categories/${id}`);\n  }\n  getCategoryCount() {\n    return this.http.get(`${environment.apiBaseUrl}/api/categories/count`);\n  }\n  addCategory(model) {\n    return this.http.post(`${environment.apiBaseUrl}/api/categories?addAuth=true`, model);\n  }\n  updateCategory(id, updateCategoryRequest) {\n    return this.http.put(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`, updateCategoryRequest);\n  }\n  deleteCategory(id) {\n    return this.http.delete(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`);\n  }\n};\nCategoryService = __decorate([Injectable({\n  providedIn: 'root'\n})], CategoryService);\nexport { CategoryService };","map":{"version":3,"names":["Injectable","HttpParams","environment","CategoryService","constructor","http","cookieService","getAllCategories","query","sortBy","sortDirection","pageNumber","pageSize","params","set","get","apiBaseUrl","getCategoryById","id","getCategoryCount","addCategory","model","post","updateCategory","updateCategoryRequest","put","deleteCategory","delete","__decorate","providedIn"],"sources":["E:\\InsightHub\\UI\\InsightHub\\src\\app\\features\\category\\services\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AddCategoryRequest } from '../models/add-category-request.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Category } from '../models/category.model';\nimport { environment } from 'src/environments/environment';\nimport { UpdateCategoryRequest } from '../models/update-category-request.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n\n  constructor(private http: HttpClient,\n    private cookieService: CookieService) { }\n\n  getAllCategories(\n    query?: string, sortBy?: string, sortDirection?: string,\n    pageNumber?: number, pageSize?: number): Observable<Category[]> {\n    let params = new HttpParams();\n\n    if (query) {\n      params = params.set('query', query)\n    }\n\n    if (sortBy) {\n      params = params.set('sortBy', sortBy)\n    }\n\n    if (sortDirection) {\n      params = params.set('sortDirection', sortDirection)\n    }\n\n    if (pageNumber) {\n      params = params.set('pageNumber', pageNumber)\n    }\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize)\n    }\n\n    return this.http.get<Category[]>(`${environment.apiBaseUrl}/api/categories`, {\n      params: params\n    });\n  }\n\n  getCategoryById(id: string): Observable<Category> {\n    return this.http.get<Category>(`${environment.apiBaseUrl}/api/categories/${id}`);\n  }\n\n  getCategoryCount(): Observable<number> {\n    return this.http.get<number>(`${environment.apiBaseUrl}/api/categories/count`);\n  }\n\n  addCategory(model: AddCategoryRequest): Observable<void> {\n    return this.http.post<void>(`${environment.apiBaseUrl}/api/categories?addAuth=true`, model);\n  }\n\n  updateCategory(id: string, updateCategoryRequest: UpdateCategoryRequest): Observable<Category> {\n    return this.http.put<Category>(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`, updateCategoryRequest);\n  }\n\n  deleteCategory(id: string): Observable<Category> {\n    return this.http.delete<Category>(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`)\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAG1C,SAAqBC,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,8BAA8B;AAO1D,IAAaC,eAAe,GAA5B,MAAaA,eAAe;EAE1BC,YAAoBC,IAAgB,EAC1BC,aAA4B;IADlB,KAAAD,IAAI,GAAJA,IAAI;IACd,KAAAC,aAAa,GAAbA,aAAa;EAAmB;EAE1CC,gBAAgBA,CACdC,KAAc,EAAEC,MAAe,EAAEC,aAAsB,EACvDC,UAAmB,EAAEC,QAAiB;IACtC,IAAIC,MAAM,GAAG,IAAIZ,UAAU,EAAE;IAE7B,IAAIO,KAAK,EAAE;MACTK,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,OAAO,EAAEN,KAAK,CAAC;;IAGrC,IAAIC,MAAM,EAAE;MACVI,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEL,MAAM,CAAC;;IAGvC,IAAIC,aAAa,EAAE;MACjBG,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEJ,aAAa,CAAC;;IAGrD,IAAIC,UAAU,EAAE;MACdE,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,YAAY,EAAEH,UAAU,CAAC;;IAG/C,IAAIC,QAAQ,EAAE;MACZC,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAAC;;IAG3C,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAa,GAAGb,WAAW,CAACc,UAAU,iBAAiB,EAAE;MAC3EH,MAAM,EAAEA;KACT,CAAC;EACJ;EAEAI,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAAW,GAAGb,WAAW,CAACc,UAAU,mBAAmBE,EAAE,EAAE,CAAC;EAClF;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAS,GAAGb,WAAW,CAACc,UAAU,uBAAuB,CAAC;EAChF;EAEAI,WAAWA,CAACC,KAAyB;IACnC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAO,GAAGpB,WAAW,CAACc,UAAU,8BAA8B,EAAEK,KAAK,CAAC;EAC7F;EAEAE,cAAcA,CAACL,EAAU,EAAEM,qBAA4C;IACrE,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAW,GAAGvB,WAAW,CAACc,UAAU,mBAAmBE,EAAE,eAAe,EAAEM,qBAAqB,CAAC;EACtH;EAEAE,cAAcA,CAACR,EAAU;IACvB,OAAO,IAAI,CAACb,IAAI,CAACsB,MAAM,CAAW,GAAGzB,WAAW,CAACc,UAAU,mBAAmBE,EAAE,eAAe,CAAC;EAClG;CACD;AAtDYf,eAAe,GAAAyB,UAAA,EAH3B5B,UAAU,CAAC;EACV6B,UAAU,EAAE;CACb,CAAC,C,EACW1B,eAAe,CAsD3B;SAtDYA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}